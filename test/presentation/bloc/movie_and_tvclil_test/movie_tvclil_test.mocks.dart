// Mocks generated by Mockito 5.2.0 from annotations
// in sub_bagussh/test/presentation/bloc/movie_and_tvclil_test/movie_tvclil_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i31;
import 'dart:convert' as _i39;
import 'dart:typed_data' as _i40;

import 'package:dartz/dartz.dart' as _i5;
import 'package:flutter_bloc/flutter_bloc.dart' as _i32;
import 'package:http/src/base_request.dart' as _i41;
import 'package:http/src/client.dart' as _i38;
import 'package:http/src/response.dart' as _i29;
import 'package:http/src/streamed_response.dart' as _i30;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sub_bagussh/common/failure.dart' as _i33;
import 'package:sub_bagussh/domain/entities/movies/movie.dart' as _i35;
import 'package:sub_bagussh/domain/entities/movies/movie_detail.dart' as _i34;
import 'package:sub_bagussh/domain/entities/tvclil/tvclil.dart' as _i36;
import 'package:sub_bagussh/domain/entities/tvclil/tvclil_detail.dart' as _i37;
import 'package:sub_bagussh/domain/repositories/movie_repository.dart' as _i4;
import 'package:sub_bagussh/domain/repositories/tvclil_repository.dart' as _i21;
import 'package:sub_bagussh/domain/usecases/movies/get_movie_detail.dart'
    as _i2;
import 'package:sub_bagussh/domain/usecases/movies/get_movie_recommendations.dart'
    as _i8;
import 'package:sub_bagussh/domain/usecases/movies/get_now_playing_movies.dart'
    as _i6;
import 'package:sub_bagussh/domain/usecases/movies/get_popular_movies.dart'
    as _i7;
import 'package:sub_bagussh/domain/usecases/movies/get_top_rated_movies.dart'
    as _i10;
import 'package:sub_bagussh/domain/usecases/movies/get_watchlist_movies.dart'
    as _i11;
import 'package:sub_bagussh/domain/usecases/movies/get_watchlist_status.dart'
    as _i12;
import 'package:sub_bagussh/domain/usecases/movies/remove_watchlist.dart'
    as _i14;
import 'package:sub_bagussh/domain/usecases/movies/save_watchlist.dart' as _i13;
import 'package:sub_bagussh/domain/usecases/movies/search_movies.dart' as _i9;
import 'package:sub_bagussh/domain/usecases/tvclil/get_now_playing_tvclil.dart'
    as _i22;
import 'package:sub_bagussh/domain/usecases/tvclil/get_popluar_tvclil.dart'
    as _i25;
import 'package:sub_bagussh/domain/usecases/tvclil/get_top_rated_tvclil.dart'
    as _i28;
import 'package:sub_bagussh/domain/usecases/tvclil/get_tvclil_detail.dart'
    as _i24;
import 'package:sub_bagussh/domain/usecases/tvclil/get_tvclil_recomendations.dart'
    as _i26;
import 'package:sub_bagussh/domain/usecases/tvclil/get_watchlist_status_tvclil.dart'
    as _i19;
import 'package:sub_bagussh/domain/usecases/tvclil/get_watchlist_tvclil.dart'
    as _i17;
import 'package:sub_bagussh/domain/usecases/tvclil/remove_watchlist_tvclil.dart'
    as _i16;
import 'package:sub_bagussh/domain/usecases/tvclil/save_watchlist_tvclil.dart'
    as _i18;
import 'package:sub_bagussh/domain/usecases/tvclil/search_tvclil.dart' as _i27;
import 'package:sub_bagussh/presentation/bloc/movie/movie_bloc.dart' as _i3;
import 'package:sub_bagussh/presentation/bloc/movie/movie_watchlist/movie_watchlist_bloc.dart'
    as _i15;
import 'package:sub_bagussh/presentation/bloc/tv/tv_bloc.dart' as _i23;
import 'package:sub_bagussh/presentation/bloc/tv/watchlist/tv_watchlist_bloc.dart'
    as _i20;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetMovieDetail_0 extends _i1.Fake implements _i2.GetMovieDetail {}

class _FakeMovieDetailState_1 extends _i1.Fake implements _i3.MovieDetailState {
}

class _FakeMovieRepository_2 extends _i1.Fake implements _i4.MovieRepository {}

class _FakeEither_3<L, R> extends _i1.Fake implements _i5.Either<L, R> {}

class _FakeGetNowPlayingMovies_4 extends _i1.Fake
    implements _i6.GetNowPlayingMovies {}

class _FakeMovieNowPlayingState_5 extends _i1.Fake
    implements _i3.MovieNowPlayingState {}

class _FakeGetPopularMovies_6 extends _i1.Fake implements _i7.GetPopularMovies {
}

class _FakeMoviePopularState_7 extends _i1.Fake
    implements _i3.MoviePopularState {}

class _FakeGetMovieRecommendations_8 extends _i1.Fake
    implements _i8.GetMovieRecommendations {}

class _FakeMovieRecommendationState_9 extends _i1.Fake
    implements _i3.MovieRecommendationState {}

class _FakeSearchMovies_10 extends _i1.Fake implements _i9.SearchMovies {}

class _FakeMovieSearchState_11 extends _i1.Fake
    implements _i3.MovieSearchState {}

class _FakeGetTopRatedMovies_12 extends _i1.Fake
    implements _i10.GetTopRatedMovies {}

class _FakeMovieTopRatedState_13 extends _i1.Fake
    implements _i3.MovieTopRatedState {}

class _FakeGetWatchlistMovies_14 extends _i1.Fake
    implements _i11.GetWatchlistMovies {}

class _FakeGetWatchListStatus_15 extends _i1.Fake
    implements _i12.GetWatchListStatus {}

class _FakeSaveWatchlist_16 extends _i1.Fake implements _i13.SaveWatchlist {}

class _FakeRemoveWatchlist_17 extends _i1.Fake implements _i14.RemoveWatchlist {
}

class _FakeMovieWatchlistState_18 extends _i1.Fake
    implements _i15.MovieWatchlistState {}

class _FakeRemoveWatchlistTvclil_19 extends _i1.Fake
    implements _i16.RemoveWatchlistTvclil {}

class _FakeGetWatchlistTvclil_20 extends _i1.Fake
    implements _i17.GetWatchlistTvclil {}

class _FakeSaveWatchlistTvclil_21 extends _i1.Fake
    implements _i18.SaveWatchlistTvclil {}

class _FakeGetWatchListStatusTvclil_22 extends _i1.Fake
    implements _i19.GetWatchListStatusTvclil {}

class _FakeTvWatchlistState_23 extends _i1.Fake
    implements _i20.TvWatchlistState {}

class _FakeTvclilRepository_24 extends _i1.Fake
    implements _i21.TvclilRepository {}

class _FakeGetNowPlayingTvclil_25 extends _i1.Fake
    implements _i22.GetNowPlayingTvclil {}

class _FakeTvOnAirState_26 extends _i1.Fake implements _i23.TvOnAirState {}

class _FakeGetTvclilDetail_27 extends _i1.Fake implements _i24.GetTvclilDetail {
}

class _FakeTvDetailState_28 extends _i1.Fake implements _i23.TvDetailState {}

class _FakeGetPopularTvclil_29 extends _i1.Fake
    implements _i25.GetPopularTvclil {}

class _FakeTvPopularState_30 extends _i1.Fake implements _i23.TvPopularState {}

class _FakeGetTvclilRecommendations_31 extends _i1.Fake
    implements _i26.GetTvclilRecommendations {}

class _FakeTvRecommendationState_32 extends _i1.Fake
    implements _i23.TvRecommendationState {}

class _FakeSearchTvclil_33 extends _i1.Fake implements _i27.SearchTvclil {}

class _FakeTvSearchState_34 extends _i1.Fake implements _i23.TvSearchState {}

class _FakeGetTopRatedTvclil_35 extends _i1.Fake
    implements _i28.GetTopRatedTvclil {}

class _FakeTvTopRatedState_36 extends _i1.Fake implements _i23.TvTopRatedState {
}

class _FakeResponse_37 extends _i1.Fake implements _i29.Response {}

class _FakeStreamedResponse_38 extends _i1.Fake
    implements _i30.StreamedResponse {}

/// A class which mocks [MovieDetailBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailBloc extends _i1.Mock implements _i3.MovieDetailBloc {
  MockMovieDetailBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetMovieDetail get getMovieDetail =>
      (super.noSuchMethod(Invocation.getter(#getMovieDetail),
          returnValue: _FakeGetMovieDetail_0()) as _i2.GetMovieDetail);
  @override
  _i3.MovieDetailState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeMovieDetailState_1()) as _i3.MovieDetailState);
  @override
  _i31.Stream<_i3.MovieDetailState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.MovieDetailState>.empty())
          as _i31.Stream<_i3.MovieDetailState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i3.MovieDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.MovieDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.MovieDetailState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i3.MovieDetailEvent>(
          _i32.EventHandler<E, _i3.MovieDetailState>? handler,
          {_i32.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i32.Transition<_i3.MovieDetailEvent, _i3.MovieDetailState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i31.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i31.Future<void>);
  @override
  void onChange(_i32.Change<_i3.MovieDetailState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetMovieDetail].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieDetail extends _i1.Mock implements _i2.GetMovieDetail {
  MockGetMovieDetail() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i31.Future<_i5.Either<_i33.Failure, _i34.MovieDetail>> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<_i5.Either<_i33.Failure, _i34.MovieDetail>>.value(
              _FakeEither_3<_i33.Failure, _i34.MovieDetail>())) as _i31
          .Future<_i5.Either<_i33.Failure, _i34.MovieDetail>>);
}

/// A class which mocks [MovieNowPlayingBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieNowPlayingBloc extends _i1.Mock
    implements _i3.MovieNowPlayingBloc {
  MockMovieNowPlayingBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetNowPlayingMovies get getNowPlayingMovies => (super.noSuchMethod(
      Invocation.getter(#getNowPlayingMovies),
      returnValue: _FakeGetNowPlayingMovies_4()) as _i6.GetNowPlayingMovies);
  @override
  _i3.MovieNowPlayingState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeMovieNowPlayingState_5()) as _i3.MovieNowPlayingState);
  @override
  _i31.Stream<_i3.MovieNowPlayingState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.MovieNowPlayingState>.empty())
          as _i31.Stream<_i3.MovieNowPlayingState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i3.MovieNowPlayingEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.MovieNowPlayingEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.MovieNowPlayingState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i3.MovieNowPlayingEvent>(
          _i32.EventHandler<E, _i3.MovieNowPlayingState>? handler,
          {_i32.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i32.Transition<_i3.MovieNowPlayingEvent, _i3.MovieNowPlayingState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i31.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i31.Future<void>);
  @override
  void onChange(_i32.Change<_i3.MovieNowPlayingState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetNowPlayingMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNowPlayingMovies extends _i1.Mock
    implements _i6.GetNowPlayingMovies {
  MockGetNowPlayingMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i31.Future<_i5.Either<_i33.Failure, List<_i35.Movie>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i5.Either<_i33.Failure, List<_i35.Movie>>>.value(
              _FakeEither_3<_i33.Failure, List<_i35.Movie>>())) as _i31
          .Future<_i5.Either<_i33.Failure, List<_i35.Movie>>>);
}

/// A class which mocks [MoviePopularBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviePopularBloc extends _i1.Mock implements _i3.MoviePopularBloc {
  MockMoviePopularBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.GetPopularMovies get getPopularMovies =>
      (super.noSuchMethod(Invocation.getter(#getPopularMovies),
          returnValue: _FakeGetPopularMovies_6()) as _i7.GetPopularMovies);
  @override
  _i3.MoviePopularState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeMoviePopularState_7()) as _i3.MoviePopularState);
  @override
  _i31.Stream<_i3.MoviePopularState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.MoviePopularState>.empty())
          as _i31.Stream<_i3.MoviePopularState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i3.MoviePopularEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.MoviePopularEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.MoviePopularState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i3.MoviePopularEvent>(
          _i32.EventHandler<E, _i3.MoviePopularState>? handler,
          {_i32.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i32.Transition<_i3.MoviePopularEvent, _i3.MoviePopularState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i31.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i31.Future<void>);
  @override
  void onChange(_i32.Change<_i3.MoviePopularState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetPopularMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularMovies extends _i1.Mock implements _i7.GetPopularMovies {
  MockGetPopularMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i31.Future<_i5.Either<_i33.Failure, List<_i35.Movie>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i5.Either<_i33.Failure, List<_i35.Movie>>>.value(
              _FakeEither_3<_i33.Failure, List<_i35.Movie>>())) as _i31
          .Future<_i5.Either<_i33.Failure, List<_i35.Movie>>>);
}

/// A class which mocks [MovieRecommendationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRecommendationBloc extends _i1.Mock
    implements _i3.MovieRecommendationBloc {
  MockMovieRecommendationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.GetMovieRecommendations get getMovieRecommendations =>
      (super.noSuchMethod(Invocation.getter(#getMovieRecommendations),
              returnValue: _FakeGetMovieRecommendations_8())
          as _i8.GetMovieRecommendations);
  @override
  _i3.MovieRecommendationState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeMovieRecommendationState_9())
          as _i3.MovieRecommendationState);
  @override
  _i31.Stream<_i3.MovieRecommendationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.MovieRecommendationState>.empty())
          as _i31.Stream<_i3.MovieRecommendationState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i3.MovieRecommendationEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.MovieRecommendationEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.MovieRecommendationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i3.MovieRecommendationEvent>(
          _i32.EventHandler<E, _i3.MovieRecommendationState>? handler,
          {_i32.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i32.Transition<_i3.MovieRecommendationEvent,
                  _i3.MovieRecommendationState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i31.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i31.Future<void>);
  @override
  void onChange(_i32.Change<_i3.MovieRecommendationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetMovieRecommendations].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieRecommendations extends _i1.Mock
    implements _i8.GetMovieRecommendations {
  MockGetMovieRecommendations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i31.Future<_i5.Either<_i33.Failure, List<_i35.Movie>>> execute(dynamic id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<_i5.Either<_i33.Failure, List<_i35.Movie>>>.value(
              _FakeEither_3<_i33.Failure, List<_i35.Movie>>())) as _i31
          .Future<_i5.Either<_i33.Failure, List<_i35.Movie>>>);
}

/// A class which mocks [MovieSearchBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieSearchBloc extends _i1.Mock implements _i3.MovieSearchBloc {
  MockMovieSearchBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.SearchMovies get searchMovies =>
      (super.noSuchMethod(Invocation.getter(#searchMovies),
          returnValue: _FakeSearchMovies_10()) as _i9.SearchMovies);
  @override
  _i3.MovieSearchState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeMovieSearchState_11()) as _i3.MovieSearchState);
  @override
  _i31.Stream<_i3.MovieSearchState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.MovieSearchState>.empty())
          as _i31.Stream<_i3.MovieSearchState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i3.MovieSearchEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.MovieSearchEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.MovieSearchState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i3.MovieSearchEvent>(
          _i32.EventHandler<E, _i3.MovieSearchState>? handler,
          {_i32.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i32.Transition<_i3.MovieSearchEvent, _i3.MovieSearchState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i31.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i31.Future<void>);
  @override
  void onChange(_i32.Change<_i3.MovieSearchState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [SearchMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchMovies extends _i1.Mock implements _i9.SearchMovies {
  MockSearchMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i31.Future<_i5.Either<_i33.Failure, List<_i35.Movie>>> execute(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#execute, [query]),
          returnValue: Future<_i5.Either<_i33.Failure, List<_i35.Movie>>>.value(
              _FakeEither_3<_i33.Failure, List<_i35.Movie>>())) as _i31
          .Future<_i5.Either<_i33.Failure, List<_i35.Movie>>>);
}

/// A class which mocks [GetTopRatedMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTopRatedMovies extends _i1.Mock implements _i10.GetTopRatedMovies {
  MockGetTopRatedMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i31.Future<_i5.Either<_i33.Failure, List<_i35.Movie>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i5.Either<_i33.Failure, List<_i35.Movie>>>.value(
              _FakeEither_3<_i33.Failure, List<_i35.Movie>>())) as _i31
          .Future<_i5.Either<_i33.Failure, List<_i35.Movie>>>);
}

/// A class which mocks [MovieTopRatedBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieTopRatedBloc extends _i1.Mock implements _i3.MovieTopRatedBloc {
  MockMovieTopRatedBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.GetTopRatedMovies get getTopRatedMovies =>
      (super.noSuchMethod(Invocation.getter(#getTopRatedMovies),
          returnValue: _FakeGetTopRatedMovies_12()) as _i10.GetTopRatedMovies);
  @override
  _i3.MovieTopRatedState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeMovieTopRatedState_13()) as _i3.MovieTopRatedState);
  @override
  _i31.Stream<_i3.MovieTopRatedState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.MovieTopRatedState>.empty())
          as _i31.Stream<_i3.MovieTopRatedState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i3.MovieTopRatedEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.MovieTopRatedEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.MovieTopRatedState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i3.MovieTopRatedEvent>(
          _i32.EventHandler<E, _i3.MovieTopRatedState>? handler,
          {_i32.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i32.Transition<_i3.MovieTopRatedEvent, _i3.MovieTopRatedState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i31.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i31.Future<void>);
  @override
  void onChange(_i32.Change<_i3.MovieTopRatedState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [MovieWatchlistBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieWatchlistBloc extends _i1.Mock
    implements _i15.MovieWatchlistBloc {
  MockMovieWatchlistBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.GetWatchlistMovies get getWatchlistMovies => (super.noSuchMethod(
      Invocation.getter(#getWatchlistMovies),
      returnValue: _FakeGetWatchlistMovies_14()) as _i11.GetWatchlistMovies);
  @override
  _i12.GetWatchListStatus get getWatchListStatus => (super.noSuchMethod(
      Invocation.getter(#getWatchListStatus),
      returnValue: _FakeGetWatchListStatus_15()) as _i12.GetWatchListStatus);
  @override
  _i13.SaveWatchlist get saveWatchlist =>
      (super.noSuchMethod(Invocation.getter(#saveWatchlist),
          returnValue: _FakeSaveWatchlist_16()) as _i13.SaveWatchlist);
  @override
  _i14.RemoveWatchlist get removeWatchlist =>
      (super.noSuchMethod(Invocation.getter(#removeWatchlist),
          returnValue: _FakeRemoveWatchlist_17()) as _i14.RemoveWatchlist);
  @override
  _i15.MovieWatchlistState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeMovieWatchlistState_18()) as _i15.MovieWatchlistState);
  @override
  _i31.Stream<_i15.MovieWatchlistState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i15.MovieWatchlistState>.empty())
          as _i31.Stream<_i15.MovieWatchlistState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i15.MovieWatchlistEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i15.MovieWatchlistEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i15.MovieWatchlistState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i15.MovieWatchlistEvent>(
          _i32.EventHandler<E, _i15.MovieWatchlistState>? handler,
          {_i32.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i32.Transition<_i15.MovieWatchlistEvent, _i15.MovieWatchlistState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i31.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i31.Future<void>);
  @override
  void onChange(_i32.Change<_i15.MovieWatchlistState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetWatchlistMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchlistMovies extends _i1.Mock
    implements _i11.GetWatchlistMovies {
  MockGetWatchlistMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i31.Future<_i5.Either<_i33.Failure, List<_i35.Movie>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i5.Either<_i33.Failure, List<_i35.Movie>>>.value(
              _FakeEither_3<_i33.Failure, List<_i35.Movie>>())) as _i31
          .Future<_i5.Either<_i33.Failure, List<_i35.Movie>>>);
}

/// A class which mocks [GetWatchListStatus].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchListStatus extends _i1.Mock
    implements _i12.GetWatchListStatus {
  MockGetWatchListStatus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i31.Future<bool> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<bool>.value(false)) as _i31.Future<bool>);
}

/// A class which mocks [RemoveWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveWatchlist extends _i1.Mock implements _i14.RemoveWatchlist {
  MockRemoveWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i31.Future<_i5.Either<_i33.Failure, String>> execute(
          _i34.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#execute, [movie]),
              returnValue: Future<_i5.Either<_i33.Failure, String>>.value(
                  _FakeEither_3<_i33.Failure, String>()))
          as _i31.Future<_i5.Either<_i33.Failure, String>>);
}

/// A class which mocks [SaveWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveWatchlist extends _i1.Mock implements _i13.SaveWatchlist {
  MockSaveWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i31.Future<_i5.Either<_i33.Failure, String>> execute(
          _i34.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#execute, [movie]),
              returnValue: Future<_i5.Either<_i33.Failure, String>>.value(
                  _FakeEither_3<_i33.Failure, String>()))
          as _i31.Future<_i5.Either<_i33.Failure, String>>);
}

/// A class which mocks [TvWatchlistBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvWatchlistBloc extends _i1.Mock implements _i20.TvWatchlistBloc {
  MockTvWatchlistBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.RemoveWatchlistTvclil get removeWatchlist =>
      (super.noSuchMethod(Invocation.getter(#removeWatchlist),
              returnValue: _FakeRemoveWatchlistTvclil_19())
          as _i16.RemoveWatchlistTvclil);
  @override
  _i17.GetWatchlistTvclil get getWatchlistTv => (super.noSuchMethod(
      Invocation.getter(#getWatchlistTv),
      returnValue: _FakeGetWatchlistTvclil_20()) as _i17.GetWatchlistTvclil);
  @override
  _i18.SaveWatchlistTvclil get saveWatchlist => (super.noSuchMethod(
      Invocation.getter(#saveWatchlist),
      returnValue: _FakeSaveWatchlistTvclil_21()) as _i18.SaveWatchlistTvclil);
  @override
  _i19.GetWatchListStatusTvclil get getWatchListStatus =>
      (super.noSuchMethod(Invocation.getter(#getWatchListStatus),
              returnValue: _FakeGetWatchListStatusTvclil_22())
          as _i19.GetWatchListStatusTvclil);
  @override
  _i20.TvWatchlistState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeTvWatchlistState_23()) as _i20.TvWatchlistState);
  @override
  _i31.Stream<_i20.TvWatchlistState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i20.TvWatchlistState>.empty())
          as _i31.Stream<_i20.TvWatchlistState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i20.TvWatchlistEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i20.TvWatchlistEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i20.TvWatchlistState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i20.TvWatchlistEvent>(
          _i32.EventHandler<E, _i20.TvWatchlistState>? handler,
          {_i32.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i32.Transition<_i20.TvWatchlistEvent, _i20.TvWatchlistState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i31.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i31.Future<void>);
  @override
  void onChange(_i32.Change<_i20.TvWatchlistState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetWatchlistTvclil].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchlistTvclil extends _i1.Mock
    implements _i17.GetWatchlistTvclil {
  MockGetWatchlistTvclil() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i31.Future<_i5.Either<_i33.Failure, List<_i36.Tvclil>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue:
                  Future<_i5.Either<_i33.Failure, List<_i36.Tvclil>>>.value(
                      _FakeEither_3<_i33.Failure, List<_i36.Tvclil>>()))
          as _i31.Future<_i5.Either<_i33.Failure, List<_i36.Tvclil>>>);
}

/// A class which mocks [GetWatchListStatusTvclil].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchListStatusTvclil extends _i1.Mock
    implements _i19.GetWatchListStatusTvclil {
  MockGetWatchListStatusTvclil() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i21.TvclilRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvclilRepository_24()) as _i21.TvclilRepository);
  @override
  _i31.Future<bool> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<bool>.value(false)) as _i31.Future<bool>);
}

/// A class which mocks [RemoveWatchlistTvclil].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveWatchlistTvclil extends _i1.Mock
    implements _i16.RemoveWatchlistTvclil {
  MockRemoveWatchlistTvclil() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i21.TvclilRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvclilRepository_24()) as _i21.TvclilRepository);
  @override
  _i31.Future<_i5.Either<_i33.Failure, String>> execute(
          _i37.TvclilDetail? tv) =>
      (super.noSuchMethod(Invocation.method(#execute, [tv]),
              returnValue: Future<_i5.Either<_i33.Failure, String>>.value(
                  _FakeEither_3<_i33.Failure, String>()))
          as _i31.Future<_i5.Either<_i33.Failure, String>>);
}

/// A class which mocks [SaveWatchlistTvclil].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveWatchlistTvclil extends _i1.Mock
    implements _i18.SaveWatchlistTvclil {
  MockSaveWatchlistTvclil() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i21.TvclilRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvclilRepository_24()) as _i21.TvclilRepository);
  @override
  _i31.Future<_i5.Either<_i33.Failure, String>> execute(
          _i37.TvclilDetail? tv) =>
      (super.noSuchMethod(Invocation.method(#execute, [tv]),
              returnValue: Future<_i5.Either<_i33.Failure, String>>.value(
                  _FakeEither_3<_i33.Failure, String>()))
          as _i31.Future<_i5.Either<_i33.Failure, String>>);
}

/// A class which mocks [TvOnAirBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvOnAirBloc extends _i1.Mock implements _i23.TvOnAirBloc {
  MockTvOnAirBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.GetNowPlayingTvclil get getOnAirTv => (super.noSuchMethod(
      Invocation.getter(#getOnAirTv),
      returnValue: _FakeGetNowPlayingTvclil_25()) as _i22.GetNowPlayingTvclil);
  @override
  _i23.TvOnAirState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeTvOnAirState_26()) as _i23.TvOnAirState);
  @override
  _i31.Stream<_i23.TvOnAirState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i23.TvOnAirState>.empty())
          as _i31.Stream<_i23.TvOnAirState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i23.TvOnAirEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i23.TvOnAirEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i23.TvOnAirState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i23.TvOnAirEvent>(
          _i32.EventHandler<E, _i23.TvOnAirState>? handler,
          {_i32.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i32.Transition<_i23.TvOnAirEvent, _i23.TvOnAirState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i31.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i31.Future<void>);
  @override
  void onChange(_i32.Change<_i23.TvOnAirState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetNowPlayingTvclil].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNowPlayingTvclil extends _i1.Mock
    implements _i22.GetNowPlayingTvclil {
  MockGetNowPlayingTvclil() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i21.TvclilRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvclilRepository_24()) as _i21.TvclilRepository);
  @override
  _i31.Future<_i5.Either<_i33.Failure, List<_i36.Tvclil>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue:
                  Future<_i5.Either<_i33.Failure, List<_i36.Tvclil>>>.value(
                      _FakeEither_3<_i33.Failure, List<_i36.Tvclil>>()))
          as _i31.Future<_i5.Either<_i33.Failure, List<_i36.Tvclil>>>);
}

/// A class which mocks [GetTvclilDetail].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTvclilDetail extends _i1.Mock implements _i24.GetTvclilDetail {
  MockGetTvclilDetail() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i21.TvclilRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvclilRepository_24()) as _i21.TvclilRepository);
  @override
  _i31.Future<_i5.Either<_i33.Failure, _i37.TvclilDetail>> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
              returnValue:
                  Future<_i5.Either<_i33.Failure, _i37.TvclilDetail>>.value(
                      _FakeEither_3<_i33.Failure, _i37.TvclilDetail>()))
          as _i31.Future<_i5.Either<_i33.Failure, _i37.TvclilDetail>>);
}

/// A class which mocks [TvDetailBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvDetailBloc extends _i1.Mock implements _i23.TvDetailBloc {
  MockTvDetailBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i24.GetTvclilDetail get getTvDetail =>
      (super.noSuchMethod(Invocation.getter(#getTvDetail),
          returnValue: _FakeGetTvclilDetail_27()) as _i24.GetTvclilDetail);
  @override
  _i23.TvDetailState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeTvDetailState_28()) as _i23.TvDetailState);
  @override
  _i31.Stream<_i23.TvDetailState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i23.TvDetailState>.empty())
          as _i31.Stream<_i23.TvDetailState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i23.TvDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i23.TvDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i23.TvDetailState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i23.TvDetailEvent>(
          _i32.EventHandler<E, _i23.TvDetailState>? handler,
          {_i32.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i32.Transition<_i23.TvDetailEvent, _i23.TvDetailState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i31.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i31.Future<void>);
  @override
  void onChange(_i32.Change<_i23.TvDetailState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetPopularTvclil].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularTvclil extends _i1.Mock implements _i25.GetPopularTvclil {
  MockGetPopularTvclil() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i21.TvclilRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvclilRepository_24()) as _i21.TvclilRepository);
  @override
  _i31.Future<_i5.Either<_i33.Failure, List<_i36.Tvclil>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue:
                  Future<_i5.Either<_i33.Failure, List<_i36.Tvclil>>>.value(
                      _FakeEither_3<_i33.Failure, List<_i36.Tvclil>>()))
          as _i31.Future<_i5.Either<_i33.Failure, List<_i36.Tvclil>>>);
}

/// A class which mocks [TvPopularBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvPopularBloc extends _i1.Mock implements _i23.TvPopularBloc {
  MockTvPopularBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i25.GetPopularTvclil get getPopularTv =>
      (super.noSuchMethod(Invocation.getter(#getPopularTv),
          returnValue: _FakeGetPopularTvclil_29()) as _i25.GetPopularTvclil);
  @override
  _i23.TvPopularState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeTvPopularState_30()) as _i23.TvPopularState);
  @override
  _i31.Stream<_i23.TvPopularState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i23.TvPopularState>.empty())
          as _i31.Stream<_i23.TvPopularState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i23.TvPopularEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i23.TvPopularEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i23.TvPopularState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i23.TvPopularEvent>(
          _i32.EventHandler<E, _i23.TvPopularState>? handler,
          {_i32.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i32.Transition<_i23.TvPopularEvent, _i23.TvPopularState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i31.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i31.Future<void>);
  @override
  void onChange(_i32.Change<_i23.TvPopularState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [TvRecommendationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvRecommendationBloc extends _i1.Mock
    implements _i23.TvRecommendationBloc {
  MockTvRecommendationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i26.GetTvclilRecommendations get getTvRecommendations =>
      (super.noSuchMethod(Invocation.getter(#getTvRecommendations),
              returnValue: _FakeGetTvclilRecommendations_31())
          as _i26.GetTvclilRecommendations);
  @override
  _i23.TvRecommendationState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeTvRecommendationState_32())
          as _i23.TvRecommendationState);
  @override
  _i31.Stream<_i23.TvRecommendationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i23.TvRecommendationState>.empty())
          as _i31.Stream<_i23.TvRecommendationState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i23.TvRecommendationEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i23.TvRecommendationEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i23.TvRecommendationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i23.TvRecommendationEvent>(
          _i32.EventHandler<E, _i23.TvRecommendationState>? handler,
          {_i32.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i32.Transition<_i23.TvRecommendationEvent,
                  _i23.TvRecommendationState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i31.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i31.Future<void>);
  @override
  void onChange(_i32.Change<_i23.TvRecommendationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetTvclilRecommendations].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTvclilRecommendations extends _i1.Mock
    implements _i26.GetTvclilRecommendations {
  MockGetTvclilRecommendations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i21.TvclilRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvclilRepository_24()) as _i21.TvclilRepository);
  @override
  _i31.Future<_i5.Either<_i33.Failure, List<_i36.Tvclil>>> execute(
          dynamic id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
              returnValue:
                  Future<_i5.Either<_i33.Failure, List<_i36.Tvclil>>>.value(
                      _FakeEither_3<_i33.Failure, List<_i36.Tvclil>>()))
          as _i31.Future<_i5.Either<_i33.Failure, List<_i36.Tvclil>>>);
}

/// A class which mocks [TvSearchBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSearchBloc extends _i1.Mock implements _i23.TvSearchBloc {
  MockTvSearchBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i27.SearchTvclil get searchTv =>
      (super.noSuchMethod(Invocation.getter(#searchTv),
          returnValue: _FakeSearchTvclil_33()) as _i27.SearchTvclil);
  @override
  _i23.TvSearchState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeTvSearchState_34()) as _i23.TvSearchState);
  @override
  _i31.Stream<_i23.TvSearchState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i23.TvSearchState>.empty())
          as _i31.Stream<_i23.TvSearchState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i23.TvSearchEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i23.TvSearchEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i23.TvSearchState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i23.TvSearchEvent>(
          _i32.EventHandler<E, _i23.TvSearchState>? handler,
          {_i32.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i32.Transition<_i23.TvSearchEvent, _i23.TvSearchState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i31.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i31.Future<void>);
  @override
  void onChange(_i32.Change<_i23.TvSearchState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [SearchTvclil].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchTvclil extends _i1.Mock implements _i27.SearchTvclil {
  MockSearchTvclil() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i21.TvclilRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvclilRepository_24()) as _i21.TvclilRepository);
  @override
  _i31.Future<_i5.Either<_i33.Failure, List<_i36.Tvclil>>> execute(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#execute, [query]),
              returnValue:
                  Future<_i5.Either<_i33.Failure, List<_i36.Tvclil>>>.value(
                      _FakeEither_3<_i33.Failure, List<_i36.Tvclil>>()))
          as _i31.Future<_i5.Either<_i33.Failure, List<_i36.Tvclil>>>);
}

/// A class which mocks [GetTopRatedTvclil].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTopRatedTvclil extends _i1.Mock implements _i28.GetTopRatedTvclil {
  MockGetTopRatedTvclil() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i21.TvclilRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvclilRepository_24()) as _i21.TvclilRepository);
  @override
  _i31.Future<_i5.Either<_i33.Failure, List<_i36.Tvclil>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue:
                  Future<_i5.Either<_i33.Failure, List<_i36.Tvclil>>>.value(
                      _FakeEither_3<_i33.Failure, List<_i36.Tvclil>>()))
          as _i31.Future<_i5.Either<_i33.Failure, List<_i36.Tvclil>>>);
}

/// A class which mocks [TvTopRatedBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvTopRatedBloc extends _i1.Mock implements _i23.TvTopRatedBloc {
  MockTvTopRatedBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i28.GetTopRatedTvclil get getTopRatedTv =>
      (super.noSuchMethod(Invocation.getter(#getTopRatedTv),
          returnValue: _FakeGetTopRatedTvclil_35()) as _i28.GetTopRatedTvclil);
  @override
  _i23.TvTopRatedState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeTvTopRatedState_36()) as _i23.TvTopRatedState);
  @override
  _i31.Stream<_i23.TvTopRatedState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i23.TvTopRatedState>.empty())
          as _i31.Stream<_i23.TvTopRatedState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i23.TvTopRatedEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i23.TvTopRatedEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i23.TvTopRatedState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i23.TvTopRatedEvent>(
          _i32.EventHandler<E, _i23.TvTopRatedState>? handler,
          {_i32.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i32.Transition<_i23.TvTopRatedEvent, _i23.TvTopRatedState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i31.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i31.Future<void>);
  @override
  void onChange(_i32.Change<_i23.TvTopRatedState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i38.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i31.Future<_i29.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i29.Response>.value(_FakeResponse_37()))
          as _i31.Future<_i29.Response>);
  @override
  _i31.Future<_i29.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i29.Response>.value(_FakeResponse_37()))
          as _i31.Future<_i29.Response>);
  @override
  _i31.Future<_i29.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i39.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i29.Response>.value(_FakeResponse_37()))
          as _i31.Future<_i29.Response>);
  @override
  _i31.Future<_i29.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i39.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i29.Response>.value(_FakeResponse_37()))
          as _i31.Future<_i29.Response>);
  @override
  _i31.Future<_i29.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i39.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i29.Response>.value(_FakeResponse_37()))
          as _i31.Future<_i29.Response>);
  @override
  _i31.Future<_i29.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i39.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i29.Response>.value(_FakeResponse_37()))
          as _i31.Future<_i29.Response>);
  @override
  _i31.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i31.Future<String>);
  @override
  _i31.Future<_i40.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i40.Uint8List>.value(_i40.Uint8List(0)))
          as _i31.Future<_i40.Uint8List>);
  @override
  _i31.Future<_i30.StreamedResponse> send(_i41.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue: Future<_i30.StreamedResponse>.value(
                  _FakeStreamedResponse_38()))
          as _i31.Future<_i30.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
