// Mocks generated by Mockito 5.2.0 from annotations
// in sub_bagussh/test/presentation/pages/tvclil/tvclil_detail_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i11;
import 'dart:ui' as _i12;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sub_bagussh/common/state_enum.dart' as _i9;
import 'package:sub_bagussh/domain/entities/tvclil/tvclil.dart' as _i10;
import 'package:sub_bagussh/domain/entities/tvclil/tvclil_detail.dart' as _i7;
import 'package:sub_bagussh/domain/usecases/tvclil/get_tvclil_detail.dart'
    as _i2;
import 'package:sub_bagussh/domain/usecases/tvclil/get_tvclil_recomendations.dart'
    as _i3;
import 'package:sub_bagussh/domain/usecases/tvclil/get_watchlist_status_tvclil.dart'
    as _i4;
import 'package:sub_bagussh/domain/usecases/tvclil/remove_watchlist_tvclil.dart'
    as _i6;
import 'package:sub_bagussh/domain/usecases/tvclil/save_watchlist_tvclil.dart'
    as _i5;
import 'package:sub_bagussh/presentation/provider/tvclil/tvclil_detail_notifier.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetTvclilDetail_0 extends _i1.Fake implements _i2.GetTvclilDetail {}

class _FakeGetTvclilRecommendations_1 extends _i1.Fake
    implements _i3.GetTvclilRecommendations {}

class _FakeGetWatchListStatusTvclil_2 extends _i1.Fake
    implements _i4.GetWatchListStatusTvclil {}

class _FakeSaveWatchlistTvclil_3 extends _i1.Fake
    implements _i5.SaveWatchlistTvclil {}

class _FakeRemoveWatchlistTvclil_4 extends _i1.Fake
    implements _i6.RemoveWatchlistTvclil {}

class _FakeTvclilDetail_5 extends _i1.Fake implements _i7.TvclilDetail {}

/// A class which mocks [TvclilDetailNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvclilDetailNotifier extends _i1.Mock
    implements _i8.TvclilDetailNotifier {
  MockTvclilDetailNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetTvclilDetail get getTvclilDetail =>
      (super.noSuchMethod(Invocation.getter(#getTvclilDetail),
          returnValue: _FakeGetTvclilDetail_0()) as _i2.GetTvclilDetail);
  @override
  _i3.GetTvclilRecommendations get getTvclilRecommendations =>
      (super.noSuchMethod(Invocation.getter(#getTvclilRecommendations),
              returnValue: _FakeGetTvclilRecommendations_1())
          as _i3.GetTvclilRecommendations);
  @override
  _i4.GetWatchListStatusTvclil get getWatchListStatusTvclil =>
      (super.noSuchMethod(Invocation.getter(#getWatchListStatusTvclil),
              returnValue: _FakeGetWatchListStatusTvclil_2())
          as _i4.GetWatchListStatusTvclil);
  @override
  _i5.SaveWatchlistTvclil get saveWatchlistTvclil => (super.noSuchMethod(
      Invocation.getter(#saveWatchlistTvclil),
      returnValue: _FakeSaveWatchlistTvclil_3()) as _i5.SaveWatchlistTvclil);
  @override
  _i6.RemoveWatchlistTvclil get removeWatchlistTvclil =>
      (super.noSuchMethod(Invocation.getter(#removeWatchlistTvclil),
              returnValue: _FakeRemoveWatchlistTvclil_4())
          as _i6.RemoveWatchlistTvclil);
  @override
  _i7.TvclilDetail get tv => (super.noSuchMethod(Invocation.getter(#tv),
      returnValue: _FakeTvclilDetail_5()) as _i7.TvclilDetail);
  @override
  _i9.RequestState get tvState =>
      (super.noSuchMethod(Invocation.getter(#tvState),
          returnValue: _i9.RequestState.Empty) as _i9.RequestState);
  @override
  List<_i10.Tvclil> get tvRecommendations =>
      (super.noSuchMethod(Invocation.getter(#tvRecommendations),
          returnValue: <_i10.Tvclil>[]) as List<_i10.Tvclil>);
  @override
  _i9.RequestState get recommendationTvState =>
      (super.noSuchMethod(Invocation.getter(#recommendationTvState),
          returnValue: _i9.RequestState.Empty) as _i9.RequestState);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
  @override
  bool get isAddedToWatchlistTv =>
      (super.noSuchMethod(Invocation.getter(#isAddedToWatchlistTv),
          returnValue: false) as bool);
  @override
  String get watchlistMessageTv => (super
          .noSuchMethod(Invocation.getter(#watchlistMessageTv), returnValue: '')
      as String);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i11.Future<void> fetchTvDetail(int? id) => (super.noSuchMethod(
      Invocation.method(#fetchTvDetail, [id]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> addWatchlistTv(_i7.TvclilDetail? tv) => (super.noSuchMethod(
      Invocation.method(#addWatchlistTv, [tv]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> removeFromWatchlistTv(_i7.TvclilDetail? tv) =>
      (super.noSuchMethod(Invocation.method(#removeFromWatchlistTv, [tv]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i11.Future<void>);
  @override
  _i11.Future<void> loadWatchlistStatusTv(int? id) => (super.noSuchMethod(
      Invocation.method(#loadWatchlistStatusTv, [id]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i11.Future<void>);
  @override
  void addListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
