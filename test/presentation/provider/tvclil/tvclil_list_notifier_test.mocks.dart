// Mocks generated by Mockito 5.2.0 from annotations
// in sub_bagussh/test/presentation/provider/tvclil/tvclil_list_notifier_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sub_bagussh/common/failure.dart' as _i6;
import 'package:sub_bagussh/domain/entities/tvclil/tvclil.dart' as _i7;
import 'package:sub_bagussh/domain/repositories/tvclil_repository.dart' as _i2;
import 'package:sub_bagussh/domain/usecases/tvclil/get_now_playing_tvclil.dart'
    as _i4;
import 'package:sub_bagussh/domain/usecases/tvclil/get_popluar_tvclil.dart'
    as _i8;
import 'package:sub_bagussh/domain/usecases/tvclil/get_top_rated_tvclil.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTvclilRepository_0 extends _i1.Fake implements _i2.TvclilRepository {
}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [GetNowPlayingTvclil].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNowPlayingTvclil extends _i1.Mock
    implements _i4.GetNowPlayingTvclil {
  MockGetNowPlayingTvclil() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TvclilRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvclilRepository_0()) as _i2.TvclilRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Tvclil>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i3.Either<_i6.Failure, List<_i7.Tvclil>>>.value(
              _FakeEither_1<_i6.Failure, List<_i7.Tvclil>>())) as _i5
          .Future<_i3.Either<_i6.Failure, List<_i7.Tvclil>>>);
}

/// A class which mocks [GetPopularTvclil].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularTvclil extends _i1.Mock implements _i8.GetPopularTvclil {
  MockGetPopularTvclil() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TvclilRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvclilRepository_0()) as _i2.TvclilRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Tvclil>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i3.Either<_i6.Failure, List<_i7.Tvclil>>>.value(
              _FakeEither_1<_i6.Failure, List<_i7.Tvclil>>())) as _i5
          .Future<_i3.Either<_i6.Failure, List<_i7.Tvclil>>>);
}

/// A class which mocks [GetTopRatedTvclil].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTopRatedTvclil extends _i1.Mock implements _i9.GetTopRatedTvclil {
  MockGetTopRatedTvclil() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TvclilRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTvclilRepository_0()) as _i2.TvclilRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Tvclil>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i3.Either<_i6.Failure, List<_i7.Tvclil>>>.value(
              _FakeEither_1<_i6.Failure, List<_i7.Tvclil>>())) as _i5
          .Future<_i3.Either<_i6.Failure, List<_i7.Tvclil>>>);
}
